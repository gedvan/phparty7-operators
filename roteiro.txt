
Null Coalesce Operator
======================

- O operador null coalesce (??) retorna o primeiro operando, se ele existir e não for nulo, ou o segundo operando caso contrário

- Por exemplo, a expressão: $a ?? $b
   Se $a existir e não for NULL, retorn $a
   Se não, retorna $b

- Na verdade, o operador ?? é uma "facilidade sintática" para algumas situações que se repetem com frequência no desenvolvimento PHP:
- Quando se deseja testar se um elemento está definido ou não antes de utilizá-lo, de modo a evitar erros
- Esses elementos podem ser índices de arrays, propriedades de objetos, variáveis, etc.

- Exemplos:

$valor = $array_valores['nome'];
// Pode lançar um WARNING, caso a chave 'nome' não esteja presente no array
if ($valor === null) {
	$valor = 'Valor padrão';
}
// Código mais verboso


- Evitando o WARNING:

if (isset($array_valores['nome'])) {
	$valor = $array_valores['nome'];
} else {
	$valor = 'Valor padrão';
}
// Código ainda verboso e repetitivo


- Com o operador ternário:

$valor = isset($array_valores['nome']) ? $array_valores['nome'] : 'Valor padrão';
// Evita o WARNING e o IF, mas o código ainda está repetitivo


- Com o operador null coalesce:

$valor = $array_valores['nome'] ?? 'Valor padrão';

// Mais enxuto, impossível


- O operador ?? pode ainda ser aninhado (com associatividade à direita):

$valor = $array_valores['nome'] ?? $valores_alterntivos['nome'] ?? 'Valor padrão';

$valor = ($array_valores['nome'] ?? ($valores_alterntivos['nome'] ?? 'Valor padrão'));


- Precedência

[ tabela de precedência de operadores em PHP ]
http://php.net/manual/en/language.operators.precedence.php

- Exemplo:

$a = usar_nome_padrao() && empty($nome_padrao) ? $defaults['nome'] ?? 'Unknown' : $nome_padrao . ' (padrão)';

                                                                                  $nome_padrao . ' (padrão)'

     usar_nome_padrao() && empty($nome_padrao)
                                                 $defaults['nome'] ?? 'Unknown'

$a = [ -------------- valor ---------------- ] ? [ ------- valor ------------ ] : [ -------- valor -------- ];

$a = [ ---------------------------------------------- valor ----------------------------------------------- ];


Spaceship Operator
==================

- O operador spaceship é um novo operador de comparação que funciona da seguinte maneira:
  - Retorna 0 se os operandos forem iguais
  - Retorna -1 se o operando da esquerda for menor
  - Retorna 1 se o operando da esquerda for maior

- Não é tão útil quanto o operator null coalesce, mas o nome é muito melhor

- Exemplos:

[ tabela com vários exemplos do spaceship operator ]

Mais info: http://php.net/manual/en/language.operators.comparison.php

- Precedência e Associatividade

[ tabela de precedência de operadores em PHP ]
http://php.net/manual/en/language.operators.precedence.php

- Exemplo de utilização



